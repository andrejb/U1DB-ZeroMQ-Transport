// Message type for zmq communictions.

package zmq_transport.common;


// A Ping message is used to find out if a server or a component is
// alive.
message Ping {
}


// A ClientInfo message is used to send information about a particular request.
message ClientInfo {
    required string client_id = 1;
    required string request_id = 2;
}

// A SubscribeRequest message is used to subscribe a zmq.SUB socket to a
// particular message type from a zmq.PUB socket.
message SubscribeRequest {
    required string key = 1;
}


// A UnsubscribeRequest message is used to unsubscribe a zmq.SUB socket from
// a particular message type from a zmq.PUB socekt.
message UnsubscribeRequest {
    required string key = 1;
}


// A SyncType message identifies the exact part of a sync process.
message SyncType {
    required string sync_type = 1;
}


// A ZMQVerb message simulates HTTP verbs.
// Note: Its not an extensive one. Simulates only the ones required by the u1db
// sync protocol.
message ZMQVerb {
    enum Verb {
        GET = 0;
        POST = 1;
        PUT = 2;
        DELETE = 3;
    }

    required Verb verb = 1;
}


// A GetSyncInfoRequest message tells the target about its current sync state.
message GetSyncInfoRequest {
    required string source_replica_uid = 1;
    required string sync_id = 2;
}


// A GetSyncInfoResponse message tells the source about its current sync state
// and the last sync state of source the target knows about.
message GetSyncInfoResponse {

    // Current target replica information.
    required string target_replica_uid = 1;
    required int32 target_replica_generation = 2;
    required string target_replica_trans_id = 3;

    // Target information about souce replica.
    required int32 source_last_known_generation = 4;
    required string source_last_known_trans_id = 5;
}


// A SendDocumentRequest message contains a document to be synced.
message SendDocumentRequest {
    required string source_replica_uid = 1;
    required string sync_id = 2;

    // Document information.
    required string doc_id = 3;
    required int32 doc_generation = 4;
    required string doc_content = 5;

    // Source replica transaction log for the above document.
    required int32 source_generation = 6;
    required string source_transaction_id = 7;
}


// A SendDocumentResponse message informs the source about a successful sync
// of an individual document.
message SendDocumentResponse {
    required string source_transaction_id = 1;
    required bool inserted = 2;
}


// A DocInfo message contains the doc_id and the doc_generation of a particular
// document.
message DocInfo {
    required string doc_id = 1;
    required int32 doc_generation = 2;
}

// An AllSentRequest message is used to indicate that all the documents have
// been send. It acts like a PING request.
message AllSentRequest {
    required int32 total_docs_sent = 1;
    required bool all_sent = 2;
}


// An AllSentResponse message is used to send a list of documents that will be
// sent shortly. It also acts like an ACK to an AllSenRequest message.
message AllSentResponse {
    required int32 target_generation = 1;
    required string target_trans_id = 2;
    repeated DocInfo doc_info = 3;
}


// A GetDocumentRequest message is sent from source to get the documents that
// were changed in the target since their last sync.
message GetDocumentRequest {
    required string source_replica_uid = 1;
    required string sync_id = 2;
    required int32  docs_received_count = 3;
}


// A GetDocumentResponse message returns a document to the source for sync.
message GetDocumentResponse {

    // Document information.
    required string doc_id = 1;
    required int32 doc_rev = 2;
    required int32 doc_generation = 3;
    required string doc_content = 4;

    // Target replica transaction for the current document.
    optional int32 target_generation = 5;
    optional string target_trans_id = 6;
}


// A PutSyncInfoRequest message is used to record the current sync state of the
// source with the target.
message PutSyncInfoRequest {
    required string sync_id = 1;
    required string source_replica_uid = 2;
    required int32 source_replica_generation = 3;
    required string source_transaction_id = 4;
}


// A PutSyncInfoResponse message is confirms a successful PutSyncInfoRequest.
message PutSyncInfoResponse {
    required string source_transaction_id = 1;
    required bool inserted = 2;
}


// A Identifier message is a message that identifies the type of messages being
// sent and also contains the message itself.
message Identifier {
    enum Type {
        PING = 1;
        SUBSCRIBE_REQUEST = 2;
        UNSUBSCRIBE_REQUEST = 3;
        SYNC_TYPE = 4;
        ZMQ_VERB = 5;
        GET_SYNC_INFO_REQUEST = 6;
        GET_SYNC_INFO_RESPONSE = 7;
        SEND_DOCUMENT_REQUEST = 8;
        SEND_DOCUMENT_RESPONSE = 9;
        DOC_INFO = 10;
        ALL_SENT_REQUEST = 11;
        ALL_SENT_RESPONSE = 12;
        GET_DOCUMENT_REQUEST = 13;
        GET_DOCUMENT_RESPONSE = 14;
        PUT_SYNC_INFO_REQUEST = 15;
        PUT_SYNC_INFO_RESPONSE = 16;
    }

    required Type type = 1;

    optional Ping ping = 2;
    optional SubscribeRequest subscribe_request = 3;
    optional UnsubscribeRequest unsubscribe_request = 4;
    optional SyncType sync_type = 5;
    optional ZMQVerb zmq_verb = 6;
    optional GetSyncInfoRequest get_sync_info_request = 7;
    optional GetSyncInfoResponse get_sync_info_response= 8;
    optional SendDocumentRequest send_document_request = 9;
    optional SendDocumentResponse send_document_response = 10;
    optional DocInfo doc_info = 11;
    optional AllSentRequest all_sent_request = 12;
    optional AllSentResponse all_sent_response = 13;
    optional GetDocumentRequest get_document_request = 14;
    optional GetDocumentResponse get_document_response = 15;
    optional PutSyncInfoRequest put_sync_info_request = 16;
    optional PutSyncInfoResponse put_sync_info_response = 17;
}

